band <- paste(colors, locations, sep = "")
print(band)
vowels <- c("a", "e", "i", "o", "u")
vowels[10] # returns NA
vowels[5] # returns NA
# Create a vector of shoe sizes
shoe_sizes <- c(5.5, 11, 7, 8, 4)
# Create a boolean vector that indicates if a shoe size is less than 6.5
shoe_is_small <- shoe_sizes < 6.5 # returns T F F F T
# Use the `shoe_is_small` vector to select small shoes
small_shoes <- shoe_sizes[shoe_is_small] # returns 5.5 4
PRINT(small_shoes)
print(small_shoes)
print(shoe_sizes[shoe_sizes <6.5])
lyric <- "I like to eat apples and bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(13, lyric)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 1:13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric,1,13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric,13,1)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 14,0)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
substr(lyric, 1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits<- substr(lyric, 15, nchar(lyric))
print(fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
print(fruit_e)
print(fruits_e)
print(fruits_e)
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
pritn(fruits_o)
print(fruits_o)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1,13)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
print(lyrics_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
print(lyrics_e)
lyric_e <- c(intro, fruits_e)
print(lyric_e)
lyric_e <- c(intro, sep =="", fruits_e)
print(lyric_e)
lyric_e <- c(intro, sep == "", fruits_e)
print(lyric_e)
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
lyric_e <- c(intro, sep == "", fruits_e)
print(lyric_e)
lyric_e <- c(intro, fruits_e)
print(lyric_e)
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
function_name <- function(name) {
greet <- paste("sup homie, ", name)
return(greet)
}
function_name <- function(name) {
greet <- paste("sup, ", name)
return(greet)
}
function_name("homie")
function_name <- function(name) {
greet <- paste("sup,", name)
return(greet)
}
function_name("homie")
# general syntax
function_name(doh)
# general syntax
function_name("doh"
)
function_name("doh")
survey_person <- function(my_name, option_1, option_2) {
print(paste("Hello, my name is", my_name))
print("I'm taking a survey")
print(paste("Do you prefer", option_1, "or", option_2, "?"))
}
survey_person("sean", "apples", "bananas")
survey_person <- function(my_name, option_1, option_2) {
print(paste("Hello, my name is", my_name))
print("I'm taking a survey")
print(paste("Do you prefer", option_1, "or", option_2, "?"))
answer <- get_input_from_person()
return(answer)
}
add_three <- function(input) {
plus_three <- input + 3
return(plus_three)
}
add_three <- function(input) {
plus_three <- input + 3
return(plus_three)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_metrics <- function(feet, inches) {
meters <- (feet*12 + inches)/39
return(meters)
}
imperial_metrics(3, 7)
height_in_meters <-imperial_metrics(6,5)
inches <-height_in_meters * 39
dogs <- c("Fido", "Spakry", "Lucky")
print(dogs)
print(hundred_nums)
hundred_nums <- 1:100
print(hundred_nums)
v1 <- C1,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v1 <- C1,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v1 <- C1,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v1 <- C(),2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v1 <- C(,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v1 <- C(1,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v1 <- c(1,2,1,3,4,5)
v2 <- c(1,2,3,6,7,8)
v3 <- v2-v1
v2 > v1
v6 <- v5-v6
v4 <- c(2,4,6,7,7)
v5 <- c(2,3)
v6 <- v5-v6
v6 <- v5-v4
print(v6)
d <- 1:5
e <- d*2
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Sean", "Tim", "Rossi")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Sean", "Tim", "Rossi")
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
m-n
x_range <- (seq(-5:10, .1))
x_range <- (seq(-5, 10, .1))
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
vowels <- c('a', 'e', 'i', 'o', 'u')
first_vowel <- vowels[1]
secodn_vowel <- vowels[2]
second_vowel <- vowels[2]
print(first_vowel)
first_vowel <- vowels[1]
vowels <- c('a', 'e', 'i', 'o', 'u')
vowels <- c('a', 'e', 'i', 'o', 'u')
first_vowel <- vowels[1]
second_vowel <- vowels[2]
print(first_vowel)
print(vowels[1+4])
print(vowels[length(vowels)])
colors <- C("red", "green", "blue")
colors <- c("red", "green", "blue")
indices <- c(1,3,4)
extracted <- colors[idnices]
extracted <- colors[indices]
colors <- c("red", "green", "blue", "yellow", "purple")
extracted <- colors[indices]
filter <- c(TRUE, FALSE, FALSE, FALSE, TRUE)
print(vowels[filter])
print(colors[filter])
shoe_sizes <- c(5.5, 6, 7, 8, 10)
print(small_shoes)
small_shoes <- shoe_sizes[small_shoes]
print(small_shoes)
small_shoes <- shoe_sizes[shoe_is_small]
show_is_small <- shoe_sizes < 6
small_shoes <- shoe_sizes[shoe_is_small]
print(small_shoes)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
eleventh <- all_numbers[length(all_numbers)]
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
eleventh <- all_numbers[11]
some_numbers <- all_numbers[2,5]
some_numbers <- all_numbers[2]
some_numbers <- all_numbers[2, 5]
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1,100,1)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0,100,2)
print(even)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0,100,2)
?all
all(even,%%)
all(even, na.rm = %%)
all(even, na.rm = FALSE, %%)
all(even = %%)
?%%
all(even%% = 2)
all(even%% == 2)
all(even%% == 0)
all(even%%2 == 0)
q()
words <- c("this", "what", "is", "not", "making", "hello", "sense")
words <- c("this", "what", "is", "not", "making", "hello", "sense")
print(phrase)
phrase <- paste(words[c(TRUE, FALSE)], collapse = " ")
print(phrase)
paste("hello", "world")
paste("hello", "the", "world")
paste("hello", "the", "world", sep = "")
paste("hello", "the", "world", collapse = "")
paste(c("a", "b", "c", "d"), c("e", "f"))
paste(c("a", "b", "c", "d"), c("e", "f"), sep = "+")
paste(c("a", "b", "c", "d"), c("e", "f"), sep = "+", collapse = "---")
make_full_name <- function(frist_name, last_name)
make_full_name <- function(frist_name, last_name)
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
make_full_name <- function(first_name, last_name = "Smith") {
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
print(my_name)
my_name <- make_full_name("Sean", "Steele")
print(my_name)
their_name <- make_full_name("Theo")
print(thier_name)
their_name <- make_full_name("Theo")
print(thier_name)
make_full_name <- function(first_name, last_name = "Smith") {
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
their_name <- make_full_name("Theo")
print(thier_name)
thier_name <- make_full_name("Theo")
print(thier_name)
c("a", 1, TRUE)
list("ada", 5, TRUE)
list(name = "ada", age = 21, did_homework = TRUE)
person <- list(name = "ada", age = 21, did_homework = TRUE)
person$name
person[["did_homework"]]
person[["did_homework"]]
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- list(c("english muffin", "sausage patty"))
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- list(c("english muffin", "sausage patty"))
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast =my_breakfast, lucnh = my_lunch)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch<- c("sandwhich")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast =my_breakfast, lucnh = my_lunch)
print(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("steak", "seven up")
print(meals)
dinner <- meals$dinner
print(dinner)
print(meals)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["dinner"]]
print(meals)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
meals[c("breakfast", "lunch")]
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast =my_breakfast, lunch = my_lunch)
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
lapply(meals, length())
length(meals$breakfast)
length(meals$lunch)
length(meals$dinner)
lapply(meals, length)
dinner <- meals$dinner
print(dinner)
num_itmes <- lapply(meals, length)
print(num_itmes)
print(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("steak", "seven up")
print(meals)
print(num_itmes)
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector) {
new_vector <- c(meal_vector, "pizza")
return(new_vector)
}
add_pizza("nachos")
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals, add_pizza)
library(stringr)
intsall.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library("stringr")
library("stringr")
as.Date(1347, origin = "1970-1-1")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees paste("Employee", 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, -10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries_2018 <-salaries_2017 + adjustments
salaries <- salaries_2018
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, -10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, -10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, 5000, 10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -10000, -5000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries_2018 <-salaries_2017 + adjustments
salaries <- salaries_2018
view(salaries)
View(salaries)
salaries <- salaries("salaries_2018")
salaries <- salaries("salaries_2018")
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries <- salaries[["salaries_2018"]]
View(salaries)
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
salaries$salaries_2018 <-salaries_2017 + adjustments
salaries$salaries_2018 <-salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(raise[salaries$got_raise == True])
# How many employees got a raise?
nrow([salaries$got_raise == True])
# How many employees got a raise?
nrow(salaries$got_raise == True)
# How many employees got a raise?
nrow(salaries[salaries$got_raise == True])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max("")]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments),]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustment"]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
View(salaries)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
avg_salary_change <- mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries$adjustments < 0)
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries[salaries$adjustments < 0])
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries[salaries$adjustments < 0],)
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(,salaries[salaries$adjustments < 0])
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == FALSE,]
# For people who did not get a raise, how much money did they lose on average?
pay_cut <- salaries[salaries$got_raise == FALSE,]
avg_loss <- mean(pay_cut$adjustments)
avg_loss <- mean(pay_cut$adjustments)
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
avg_loss <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
# Write a .csv file of your salary data to your working directory
getwd()
setwd("C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-10-exercises/exercise-2")
getwd
getwd()
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
source('C:/Users/gdogg/Desktop/UW/INFO 201 A Wi_2020/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
